plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.sonarqube" version "4.3.1.3277"
    id 'jacoco'
}

group = 'com.s207'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // swagger(springdoc)
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    //repository service
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"

    runtimeOnly 'com.mysql:mysql-connector-j'


    //deploy by sam and lambda
    implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.0-M2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.4'
    implementation 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
    implementation platform('software.amazon.awssdk:bom:2.23.12')
    implementation 'software.amazon.awssdk:s3'


    //test repository
    testImplementation 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //security
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
    implementation 'org.springframework.boot:spring-boot-starter-security:3.2.4'
    testImplementation 'org.springframework.security:spring-security-test'

    //jwt
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation 'com.auth0:java-jwt:4.4.0'


    //api fetch
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.1'

}

configurations {
    querydsl.extendsFrom compileClasspath
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    // finalizedBy : 이(test) 작업에 대해 주어진 종료자 작업을 추가
    finalizedBy jacocoTestReport // test 작업이 끝나고 jacocoTestReport를 실행
    useJUnitPlatform()

    jacoco {
        excludes += [
                "**/*Application*",
                "**/*Config*",
                "**/dto/**",
                "**/entity/**",
                "**/global/**",
                "**/infra/**",
                "**/*Interceptor*",
                "**/*Filter*",
                "**/*Handler*",
                "**/*Exception*",
                "**/*Provider*"
        ]
    }
}


jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Config*",
                            "**/dto/**",
                            "**/global/**",
                            "**/infra/**",
                            "**/domain/**/domain/**",
                            "**/*Interceptor*",
                            "**/*Filter*",
                            "**/*Handler*",
                            "**/*Exception*",
                            "**/*Provider*"
                    ] + Qdomains)
                })
        )
    }
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacocoTestReport.xml"
    }
}